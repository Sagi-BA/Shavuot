import os
import base64
import requests
from concurrent.futures import ThreadPoolExecutor
from typing import Union, Literal, List, Tuple
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class ImgurUploader:
    def __init__(self, client_id: str = None, max_retries: int = 3, timeout: int = 10, max_workers: int = 5):
        self.imgur_client_id = client_id or os.getenv("IMGUR_CLIENT_ID")
        if not self.imgur_client_id:
            raise ValueError("Imgur Client-ID not found. Please provide it or set it in the environment variables.")
        
        self.session = requests.Session()
        self.session.headers.update({'Authorization': f'Client-ID {self.imgur_client_id}'})
        self.max_retries = max_retries
        self.timeout = timeout
        self.executor = ThreadPoolExecutor(max_workers=max_workers)

    def upload_media_to_imgur(
        self, media_base64: str, media_type: Literal["image", "video"], 
        title: str = "AI Generated Media", 
        description: str = "This media was generated by an AI model"
    ) -> str:
        """
        Uploads base64-encoded media (image or video) to Imgur using the API.

        :param media_base64: Base64-encoded string of the image or video.
        :param media_type: Type of media, either "image" or "video".
        :param title: Title for the media.
        :param description: Description for the media.
        :return: URL of the uploaded media, or a placeholder if upload fails.
        """
        
        payload = {
            'type': 'base64',
            'title': title,
            'description': description,
            'image': media_base64 if media_type == "image" else None,
            'video': media_base64 if media_type == "video" else None
        }

        return self._execute_with_retry("https://api.imgur.com/3/upload", payload)

    def _execute_with_retry(self, url: str, payload: dict) -> str:
        # print(payload)
        for attempt in range(self.max_retries):
            try:
                response = self.session.post(url, data=payload, timeout=self.timeout)
                response.raise_for_status()
                return response.json().get('data', {}).get('link', "https://i.ibb.co/wWFYPtQ/no-image.png")
            except requests.exceptions.RequestException as e:
                if attempt == self.max_retries - 1:
                    print(f"Upload failed after {self.max_retries} attempts.")
                    return "https://i.ibb.co/wWFYPtQ/no-image.png"
                print(f"Attempt {attempt + 1} failed. Retrying...")

    def upload_multiple(self, media_list: List[Tuple[str, Literal["image", "video"], str, str]]) -> List[str]:
        """
        Uploads multiple media items to Imgur concurrently.

        :param media_list: List of tuples (media_base64, media_type, title, description)
        :return: List of URLs of the uploaded media
        """
        futures = [
            self.executor.submit(self.upload_media_to_imgur, media, media_type, title, description)
            for media, media_type, title, description in media_list
        ]
        return [future.result() for future in futures]

    def __del__(self):
        self.session.close()
        self.executor.shutdown(wait=False)

# Example usage
if __name__ == "__main__":
    uploader = ImgurUploader()
    
    # Example with a base64-encoded image
    with open("uploads/example_image.webp", "rb") as image_file:
        image_base64 = base64.b64encode(image_file.read()).decode()
    
    image_url = uploader.upload_media_to_imgur(image_base64, "image", "Test Image", "This is a test image")
    print(f"Uploaded image URL: {image_url}")
    
    # Example with a base64-encoded video
    with open("uploads/example_video.mp4", "rb") as video_file:
        video_base64 = base64.b64encode(video_file.read()).decode()
    
    video_url = uploader.upload_media_to_imgur(video_base64, "video", "Test Video", "This is a test video")
    print(f"Uploaded video URL: {video_url}")
    
    # Example with multiple uploads
    # media_list = [
    #     (image_base64, "image", "Image 1", "Description 1"),
    #     (video_base64, "video", "Video 1", "Description 2"),
    #     # Add more tuples as needed
    # ]
    # urls = uploader.upload_multiple(media_list)
    # for i, url in enumerate(urls, 1):
    #     print(f"Uploaded media {i} URL: {url}")
